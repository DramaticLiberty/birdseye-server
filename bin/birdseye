#!/usr/bin/env python
# -*- coding: utf-8 -*-
import gevent.monkey; gevent.monkey.patch_all()

import sys
import platform
from gevent import subprocess
from flask_script import Manager
from flask_migrate import Migrate, MigrateCommand
from flask_rq2.script import RQManager

import birdseye
from birdseye import app, db, rq

migrate = Migrate(app, db)
manager = Manager(app)

manager.add_command('db', MigrateCommand)
manager.add_command('rq', RQManager(rq))

@manager.command
def reset_tables():
    '''Creates database tables from our models, destroys existing data in
    the process.'''
    import birdseye.models
    db.drop_all()
    db.create_all()

@manager.command
def test():
    '''Runs the tests.'''
    print('\nStarting server tests.\n')
    birdseye_test = ['birdseye-test', '--nocapture']
    subprocess.call(birdseye_test)


@manager.command
def runproduction():
    print('\nStarting gunicorn production.')
    gunicorn = [
        'gunicorn',
        '-w', '2',
        '-k', 'gevent',
        '--worker-connections', '1000', # This is the default
        '--preload',
        '--timeout', '0', # we are using async workers
        # for which timeout does not make sense
        '--keep-alive', '5', # default is 2
        '--bind', 'unix:/tmp/birdseye_gunicorn.sock',
        '-p', '{}.pid'.format(platform.node()),
        'birdseye:app']
    print(' '.join(gunicorn))
    subprocess.call(gunicorn)
    print('Server {} terminated.'.format(birdseye.__version__))

if __name__ == '__main__':
    manager.run()
